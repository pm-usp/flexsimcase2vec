# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TpTO1aflw-HCtvBQSaWYUJ6ntPWzRqvQ

# Import required libraries
"""

import pandas as pd
import time
import os

###########################
# When using Google Colab #
###########################
#from google.colab import files, drive
#drive.mount('/content/gdrive/')

import sys
sys.path.append('./')
from Trace2BPVec import Trace2BPVec

"""#Define global variables"""

RES_DIR = 'results/'

LOG_ID = 'incident'#'helpdesk'
LOG_DIR = '../../'
LOG_FILENAME = 'incident_evt_log-processed1-classiclogformat.csv'               #'helpdesk.csv'    
CASES_ATTRIBS_IDS_FILE = 'incident_evt_log-processed1-all_case_attribs_ids.csv' #'helpdesk-all_case_attribs_ids.csv' #'
TRACE_KEY = 'number'                                                            #'CaseID' 
ACTIVITY_KEY = 'activity'                                                       #'ActivityID'

SEED = 1

SKIP_GRAM_WINDOW_SIZE = 3
E_DIMENSIONS = [128]#[3,8,12,18,24,32,64,128]
USE_TIMES = [['SameDayTime-case_avg_id', 'TimeSincePreviousEvent-case_avg_id', 'Weekday-case_avg']]
USE_DURATION = ['Duration_id']#[False, 'Duration_id']
CASE_ATTRIBS = ['category', 'priority']
CASE_ATTRIBS_COMBS = [['category']]#[False, ['category'], ['category', 'priority']]
USE_VARIANTS = ['variant_id']#['trace_act_id']#[False,'variant_id']
VARIANT_WEIGHT = 20
USE_ONLYTRAINSET = [False]
TRAIN_PERC = 2/3

"""#Load data"""

EVENT_LOG = pd.read_csv(LOG_DIR+LOG_FILENAME, usecols=[TRACE_KEY, ACTIVITY_KEY]+CASE_ATTRIBS)
TRACES_IDS = EVENT_LOG[TRACE_KEY].unique()
EVENT_LOG = EVENT_LOG.set_index(TRACE_KEY).join(pd.read_csv(f'{LOG_DIR}{CASES_ATTRIBS_IDS_FILE}').set_index(TRACE_KEY)).reset_index()

EVENT_LOG.head(5)

"""#Define functions"""

def train_and_save(res_filename, res_dir, dataset, sim_cols, sim_cols_weights, trace_key, traces_ids, window, seed, dimensions):
  if not os.path.isfile(f'{res_dir}models/{res_filename}.model'):
    starttime = time.time()
    if 'variantTrue' in res_filename and VARIANT_WEIGHT:
      trace2bpvec = Trace2BPVec(dataset, trace_key=trace_key, sim_cols=sim_cols, sim_cols_weights=sim_cols_weights, seed=seed, dimensions=dimensions)
    else:
      trace2bpvec = Trace2BPVec(dataset, trace_key=trace_key, sim_cols=sim_cols, seed=seed, dimensions=dimensions)
    model = trace2bpvec.fit(window=window)
    endtime = time.time()
    model.save(f'{res_dir}models/{res_filename}.model')

    vectors = [list(model.wv.get_vector(t)) for t in traces_ids]
    vectors_df = pd.DataFrame(vectors)
    vectors_df[trace_key] = pd.Series(traces_ids)
    vectors_df.to_csv(f'{res_dir}{res_filename}.csv', index=False)
    return endtime-starttime
  return None

"""#Iterate over models options to train and save results"""

execution_times = {'filename': [], 'training_time':[]}
for onlytrainset in USE_ONLYTRAINSET:
  if onlytrainset:
    traces = sorted(TRACES_IDS)
    TRAIN_CASES = list(traces)[:int(len(traces)*TRAIN_PERC)]
    EVENT_LOG = EVENT_LOG[EVENT_LOG[TRACE_KEY].isin(TRAIN_CASES)]
  for d in E_DIMENSIONS:
    for use_times in USE_TIMES:
      for use_duration in USE_DURATION:
        for case_attribs in CASE_ATTRIBS_COMBS:
          for use_variants in USE_VARIANTS:

            if use_times != use_duration and (not use_times or not use_duration):
              continue

            sim_cols = []
            sim_cols_weights = []

            use_variants_str = use_variants
            if use_variants:
              sim_cols.append(use_variants)
              use_variants_str = True
              if use_variants and VARIANT_WEIGHT:
                sim_cols_weights.append(VARIANT_WEIGHT)
            else: sim_cols.append(ACTIVITY_KEY)

            use_times_str = use_times
            if use_times:
              for col in use_times:
                sim_cols.append(col)
                if use_variants and VARIANT_WEIGHT:
                  sim_cols_weights.append(1)
              use_times_str = True

            use_duration_str = use_duration
            if use_duration:
              sim_cols.append(use_duration)
              if use_variants and VARIANT_WEIGHT:
                  sim_cols_weights.append(1)
              use_duration_str = True

            case_attribs_str = case_attribs
            if case_attribs:
              for case_attrib in case_attribs:
                sim_cols.append(case_attrib)
                if use_variants and VARIANT_WEIGHT:
                  sim_cols_weights.append(1)
              case_attribs_str = f"${'-'.join(case_attribs)}"


            filename = f'trace2BPVec_{d}d-{LOG_ID}-times{use_times_str}_attribs{case_attribs_str}_duration{use_duration_str}_variant{use_variants_str}_onlytrain{onlytrainset}'
            if VARIANT_WEIGHT:
              filename = f'trace2BPVec_{d}d-{LOG_ID}-times{use_times_str}_attribs{case_attribs_str}_duration{use_duration_str}_variant{use_variants_str}{VARIANT_WEIGHT}_onlytrain{onlytrainset}'
            print(filename)
            training_time = train_and_save(filename, RES_DIR, EVENT_LOG, sim_cols, sim_cols_weights, TRACE_KEY, TRACES_IDS, SKIP_GRAM_WINDOW_SIZE, SEED, d)
            print(training_time)
            execution_times['filename'].append(filename)
            execution_times['training_time'].append(training_time)

pd.DataFrame(execution_times).to_csv(f'{RES_DIR}/../metadata_{time.strftime("%Y%m%d%H%M%S")}.csv', index=False)

